module data_ram #(
    ROW_DIMENSION = 4 : ROW_DIMENSION > 0,
    COLUMN_DIMENSION = 4 : COLUMN_DIMENSION > 0,
    ENCODING_AMOUNT = 4 : ENCODING_AMOUNT > 0
    )(
    input clk,  // clock
    input rst,  // reset
    input update,
    input player_x_pos[2],
    input player_y_pos[2],
    input address[$clog2(ROW_DIMENSION*COLUMN_DIMENSION)],
    input start,
    input map_num_au[2],
    output out_encoding[2],
    output ready,
    //output clear,
    output debug_address_pointer[$clog2(ROW_DIMENSION*COLUMN_DIMENSION)],
    output debug_data[3]
  ) {
  
  const DEPTH =  COLUMN_DIMENSION * ROW_DIMENSION;
  fsm writer(.clk(clk), .rst(rst)) = { //now clear is before init
    INIT, 
    CLEAR, //what i add
    WRITE,
    ERASE, 
    CHECK,
    LOSE,
    WIN,
    IDLE
    };
  dff writer_pointer[$clog2(DEPTH)](#INIT(0),.clk(clk), .rst(rst));
  dff update_flag(#INIT(0), .clk(clk), .rst(rst));
  dff start_flag(#INIT(0), .clk(clk), .rst(rst));
  dff clear_flag(#INIT(0), .clk(clk), .rst(rst)); //clear
  dff counter[27](.clk(clk), .rst(rst), #INIT(0)); //can use to stop flashing map
  
  const BACKGROUND_COLOR = b00;
  const PLAYER_COLOR = b11;
  const LOSE_COLOR = b01;
  const WIN_COLOR = b10; 
  map_rom mapRom;
  simple_dual_ram ram(.rclk(clk), .wclk(clk), #DEPTH(DEPTH), #SIZE($clog2(ENCODING_AMOUNT)));
  var i;
  
  always {
    ram.raddr = 0;
    ram.waddr = 0;
    ram.write_data = 0;
    ram.write_en = 0;
    //mapRom.map_num = 1; // hardcoding it here affects the map
    mapRom.map_num = map_num_au;
    //mapRom.map_num = au_top.rom_address;
    //clear =0; //clear is 0 by default
    clear_flag.d = 0; //clear edit


    out_encoding = 0;
    debug_data = 0;
    
    //ready = writer.q == writer.IDLE | writer.LOSE; //what i add
    ready = writer.q == writer.IDLE; 
    //ready = writer.q == writer.IDLE | writer.INIT; 
    debug_address_pointer = writer_pointer.q;
    
    // always catch any positive update request 
    if (update){
      update_flag.d = update;
    }
    if (start){ //what i add
      start_flag.d = start;
    }
    if (start_flag.q){ //what i add
    start_flag.d = 0;
    writer_pointer.d =0; //what i add
    //counter.d =0;
    //mapRom.map_num = map_num_au;  //what i add2 NOT WORK
    writer.d =writer.INIT;}
    else{

    case (writer.q){
        /*writer.CLEAR: //what i add
          ram.write_en = b1;*/
        
      writer.INIT: 
        writer_pointer.d =0; //will this do anything? no
        ram.write_en = b1; 
        ram.waddr = writer_pointer.q;
        ram.write_data = mapRom.out_encoding[writer_pointer.q];
         //clear, disable update  
        writer_pointer.d = writer_pointer.q + 1; 
        //counter.d = counter.q + 1; 
          clear_flag.d = 1; //clear 
          debug_data = b001;
        if (&writer_pointer.q){
          debug_data = b001;
          //ram.raddr = address; //PLS DONT DO THIS
          //out_encoding = ram.read_data; //PLS DONT DO THIS
          
          //clear_flag.d = 1; //clear
          //update_flag.d =0; //clear, disable update
          counter.d = 0;
          writer_pointer.d =player_y_pos*4 + player_x_pos; //to prevent erase at wrong place
          writer.d=writer.IDLE; //does the position of this line of code matter? NO
          // advanced to write 
          //writer.d = writer.WRITE;
          // set writer pointer to player position 
          //writer_pointer.d = player_y_pos*4 + player_x_pos;
        }/*
        if (&writer_pointer.q && &counter.q){
           
          // advanced to write 
          writer.d = writer.WRITE;
          // set writer pointer to player position 
          writer_pointer.d = player_y_pos*4 + player_x_pos;
        }*/
             
        writer.CLEAR:

          //clear = 1; this one doesn't clear all the map data_ram
          writer_pointer.d =0; //will this do anything? no
          ram.write_en = b1; 
          ram.waddr = writer_pointer.q;
          ram.write_data = BACKGROUND_COLOR; 
          writer_pointer.d = writer_pointer.q + 1; 
          debug_data = b010;  
          //counter.d = counter.q + 1; 
          if (&writer_pointer.q){
              debug_data = b010; 
              clear_flag.d = 0; 
              //writer.d = writer.WRITE; //TESTING IF IT GOES TO CLEAR
              writer_pointer.d =player_y_pos*4 + player_x_pos;
                } 
           
        
        
          
          
        
      writer.ERASE: 
        //clear = 0; //clear edit
        //counter.d=0;
        ram.write_en = b1; 
        ram.waddr = writer_pointer.q; // this is old player address 
        ram.write_data = BACKGROUND_COLOR; // set back to background color 
        //writer.d = writer.ERASE_TOP_LEFT;
        writer.d = writer.WRITE;
        writer_pointer.d = player_y_pos*4 + player_x_pos; // update player position +
        debug_data = b011;
           
      writer.WRITE:
        //clear = 0;
        ram.write_en = b1; // enable the dual ram write
        ram.waddr = writer_pointer.q; // write to the respective address
        ram.write_data = PLAYER_COLOR; // write player position (red)_
        //writer.d = writer.WRITE_TOP_LEFT;
        //writer.d = writer.CHECK;
        writer.d = writer.CHECK;
        debug_data = b100;
       
      writer.CHECK:
        //clear = 0;
        ram.write_en = b0;
        debug_data = b101;
        if (mapRom.out_encoding[writer_pointer.q] == LOSE_COLOR){ //if current location is red,
          writer_pointer.d =0; //trying
          writer.d = writer.LOSE;
        }
        else if (mapRom.out_encoding[writer_pointer.q] == WIN_COLOR){ //if current location is green,
          writer_pointer.d =0; //trying
          writer.d = writer.WIN;
        }    
            
        else{
        writer.d = writer.IDLE;
        //writer_pointer.d = player_y_pos*4 + player_x_pos; //horrible, dont add
        }
        debug_data = b100;
        
      writer.LOSE:
        
        ram.write_en = b1; 
        ram.waddr = writer_pointer.q;
        ram.write_data = LOSE_COLOR;
        writer_pointer.d = writer_pointer.q + 1; 
        if (&writer_pointer.q){
          writer.d =writer.IDLE;
            writer_pointer.d = 0;
            update_flag.d = 0;}
          
        
        debug_data = b110;
        //ram.raddr = address;
        //out_encoding = ram.read_data;
          
       writer.WIN:
        
        ram.write_en = b1; 
        ram.waddr = writer_pointer.q;
        ram.write_data = WIN_COLOR;
        writer_pointer.d = writer_pointer.q + 1; 
        if (&writer_pointer.q){
          writer.d =writer.IDLE;
            writer_pointer.d = 0;
            update_flag.d = 0;}
          
        
        debug_data = b111; 
    
        
      /*writer.CHECK:
        ram.raddr = address;
        //out_encoding = ram.read_data;
        ram.write_en = b1; 
        ram.waddr = writer_pointer.q;
        
        if (mapRom.out_encoding[writer_pointer.q] == b01){
        if (ram.read_data == b01){ //red
          for (i=0; i<16;i++){ //flash all red
          if (writer_pointer.q == i){
            ram.write_data = b01;
            }
       }}
          if (ram.read_data == b10){ //green
          for (i=0; i<16;i++){ //flash all green
          if (writer_pointer.q == i){
            ram.write_data = b10;
            }
       }}
          writer_pointer.d = writer_pointer.q + 1; 
            if (&writer_pointer.q){
          writer.d = writer.IDLE;
          writer_pointer.d = player_y_pos*4 + player_x_pos;}*/
        
          
      writer.IDLE:
        //clear = 0;
        //clear_flag.d = 0; //clear edit ???
        ram.raddr = address;
        out_encoding = ram.read_data;
        debug_data = b1000; // for debugging
        writer.d = writer.IDLE; // remain in state
        if (update_flag.q){
            update_flag.d = 0;
            writer.d = writer.ERASE;
            //writer_pointer.d =player_y_pos*4 + player_x_pos; //to prevent erase at wrong place sorry this one very weird: trailing player
        }
          
        if(clear_flag.q){
          counter.d = counter.q + 1;
          if (&counter.q){
          writer.d = writer.CLEAR;}
        
        /*        
        //counter.d = counter.q + 1;
        if (&counter.q){
            //clear edit
            //clear = 1; this one doesn't clear all the map data_ram
            writer_pointer.d =0; //will this do anything? no
            ram.write_en = b1; 
            ram.waddr = writer_pointer.q;
            ram.write_data = BACKGROUND_COLOR; 
            writer_pointer.d = writer_pointer.q + 1; 
              
        
        //counter.d = counter.q + 1; 
        if (&writer_pointer.q){
            clear_flag.d = 0; 
            writer.d = writer.WRITE;
            writer_pointer.d =player_y_pos*4 + player_x_pos;
              } 
        } 
          */
              
        //debug_data = c{b11, update_flag.q};
      
    }
    
  }}
}
