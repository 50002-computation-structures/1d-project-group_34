module game_miniBeta (
    input start_button, 
    input p1_button_up,
    input p1_button_down,
    input p1_button_left,
    input p1_button_right,
    
    input p2_button_up,
    input p2_button_down,
    input p2_button_left,
    input p2_button_right,
    
    input clk,  // clock
    input rst  // reset
    
    //output debug_out[16],
    //output debug_slowclock
    
    /*output debug_out[16] 
    output p1_out[16], -> nat p1 score to led
    output p2_out[16],
    output debug_slowclock,
    output debug_vcclock,*/
   

  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu game_alu;
  map_rom mapRom; 
  player_pos_rom playerpos;
  
  .clk(clk){
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles players;
      
      

      counter slow_timer(#SIZE(1),#DIV(26)); 

    }
  }
  always {
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // 1 second timer detector

    
    //pass timer and counter signals to CU unit 
    game_controlunit.decrease_timer = game_timer_detector.out;
 
    
    //pass button press signal to CU unit
    game_controlunit.start_button = start_button; 
    game_controlunit.p1_button_up = p1_button_up;
    game_controlunit.p1_button_down = p1_button_down;
    game_controlunit.p1_button_left = p1_button_left;
    game_controlunit.p1_button_right = p1_button_right;
    
    game_controlunit.p2_button_up = p2_button_up;
    game_controlunit.p2_button_down = p2_button_down;
    game_controlunit.p2_button_left = p2_button_left;
    game_controlunit.p2_button_right = p2_button_right;    
    
    game_controlunit.p1_x_coord = players.p1_x_coord;
    game_controlunit.p1_y_coord = players.p1_y_coord;
    game_controlunit.p2_x_coord = players.p2_x_coord;
    game_controlunit.p2_y_coord = players.p2_y_coord;
    
    mapRom.address = c{players.p1_x_coord, players.p1_y_coord};
    mapRom.map_num = players.mapnum;
    
    playerpos.map_num = players.mapnum;



    
    //Setup REGFILE unit 
    players.we = game_controlunit.we_regfile;
    players.write_address = game_controlunit.regfile_write_address_c;
   
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    //rb used to compare the branch states in fsm in game_CU
    game_controlunit.regfile_datain = players.out_b;
    
    //asel mux
    case(game_controlunit.asel){
      b000  : inputAlu_a = players.out_a;
      b001  : inputAlu_a = 1; 
      b010  : inputAlu_a = 0;
      b011  : inputAlu_a = 10; //A
      b100  : inputAlu_a = 2; 
      b101 :  inputAlu_a = mapRom.out_encoding[players.p1_y_coord*4+players.p1_x_coord]; 
      b110 :  inputAlu_a = playerpos.outx;
      b111 :  inputAlu_a = playerpos.outy;
      default : 
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = 2;
      b10 : inputAlu_b = 0;
      b11 : inputAlu_b = 3;

      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn_signal = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.wdsel){
      b01 : players.data = b1111111111111111;  //win
      b10 : players.data = b0000000000001111;  //draw
      b11 : players.data = 0;                  //lose
      default : //b00
          players.data = game_alu.out;
    }
    
    //for debugging
  //  debug_out[3:0] = players.all_buttons;
  //  debug_out[7:4] = players.out;    
  //  debug_out = game_controlunit.debug;
    
    /*debug_out = players.timer;
    debug_out = vc.debug;
    p1_out = players.all_scores[15:0];
    p2_out = players.all_scores[31:16];
    debug_slowclock = slow_timer.value;
    debug_vcclock = vc.out; */
 
  }
}