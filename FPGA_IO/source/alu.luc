module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
    
  // declaring instances of each module
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare; 
  multiplier multiplier;
  divider divider;
  mux_4 mux_4_1[16];
  mux_4 mux_4_2[16];
  
  sig cmp;
  var i;
  
  //assigning values required in each module to inputs
  always {
    z = adder.z;
    v = adder.v;
    n = adder.n;
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    shifter.a = a;
    shifter.b = b[4:0];
    shifter.alufn_signal = alufn_signal;
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    multiplier.a = a;
    multiplier.b = b;
    divider.a = a;
    divider.b = b;
    cmp = c{15x{b0}, compare.cmp};

    for (i=0; i<16; i++){
      /*
      mux_2.s0[i] = alufn_signal[1];
      mux_2.in[i][0] = adder.out[i];
      mux_2.in[i][1] = multiplier.mul[i];
      */
      
      mux_4_1.s0[i] = alufn_signal[0];
      mux_4_1.s1[i] = alufn_signal[1];
      mux_4_1.in[i][0] = adder.out[i];
      mux_4_1.in[i][1] = adder.out[i];
      mux_4_1.in[i][2] = multiplier.mul[i]; 
      mux_4_1.in[i][3] = divider.d[i];
      
      
      mux_4_2.s1[i] = alufn_signal[5];
      mux_4_2.s0[i] = alufn_signal[4];
      mux_4_2.in[i][0] = mux_4_1.out[i];  
      mux_4_2.in[i][1] = boolean.bool[i];
      mux_4_2.in[i][2] = shifter.shift[i];
      mux_4_2.in[i][3] = cmp[i];
    }
    out = mux_4_2.out;    
  }
}
