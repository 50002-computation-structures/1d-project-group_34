// adder takes 16 bits input for a and 16 bits input for b, returns 16 bits output
//returns 3 one bit outputs z,v,n

module adder (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {

//instantiate rca module that does the 16 bit signed addition/substraction
//instantiate signal xb[16] (xor of b) that holds 16 bits representing b or -b based on alufn_signal

  rca rca;
  sig xb[16];
  
//assigns a, xor of b with alufn_signal and alufn_signal to rca a,b,ci inputs respectively
//alufn_signal[0] creates the twos complement of b when set to 1 

  always {
    xb[15:0] = b^ 16x{alufn_signal[0]};
    rca.a = a;
    rca.b = xb;
    rca.ci = alufn_signal[0];



//assignes 16 sum outputs of rca to 16 bit output of adder module 
//assignes z,v,n output of adder module

    out = rca.s;
    z = ~|rca.s;
    v = (a[15] & xb[15] & !rca.s[15]) | (!a[15] & !xb[15] & rca.s[15]);
    n = rca.s[15];
  }
}

// Checking Comment-ability of code here 
