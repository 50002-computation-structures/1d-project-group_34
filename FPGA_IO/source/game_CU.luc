module game_CU (
    input clk,  // clock
    input rst,  // reset

    input decrease_timer,
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    input start_button,
    input p1_button_up,
    input p1_button_down,
    input p1_button_left,
    input p1_button_right,
    
    input p2_button_up,
    input p2_button_down,
    input p2_button_left,
    input p2_button_right,
    
    input p1_x_coord,
    input p1_y_coord,
    input p2_x_coord,
    input p2_y_coord,
    
    //input playerpos, 
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output wdsel[2],
    output regfile_write_address_c[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output debug[4],
    output fsm_to_led_write[1]
  ) {

  map_rom mapRom;
  player_pos_rom playerPosRom;
  
  sig map[16][2];
  sig loc_type[2];
  
  .clk(clk){

    fsm game_fsm={
      CHECK_MAP_COUNT,
      BRANCH_MAP,
      LOAD_MAP_0,
      ADD_1_TO_MAP,
      MAP_UPDATE,
      FLASH_MAP,
      STOP_FLASH_MAP,
      TIMER_OUT,
      INITP1_X_POS,
      INITP1_Y_POS,
      INITP2_X_POS,
      INITP2_Y_POS,
      
      IDLE,

      CHECK_P1_UP_BOUNDARY,
      BRANCH_P1_UP,
      SHIFT_P1_UP,
      CHECK_P2_UP_BOUNDARY,
      BRANCH_P2_UP,
      SHIFT_P2_UP,

      CHECK_P1_DOWN_BOUNDARY,
      BRANCH_P1_DOWN,
      SHIFT_P1_DOWN,
      CHECK_P2_DOWN_BOUNDARY,
      BRANCH_P2_DOWN,
      SHIFT_P2_DOWN,

      CHECK_P1_LEFT_BOUNDARY,
      BRANCH_P1_LEFT,
      SHIFT_P1_LEFT,
      CHECK_P2_LEFT_BOUNDARY,
      BRANCH_P2_LEFT,
      SHIFT_P2_LEFT,

      CHECK_P1_RIGHT_BOUNDARY,
      BRANCH_P1_RIGHT,
      SHIFT_P1_RIGHT,
      CHECK_P2_RIGHT_BOUNDARY,
      BRANCH_P2_RIGHT,
      SHIFT_P2_RIGHT,

      CHECK_P1_POS,
      BRANCH_CONTINUE_END_P1,
      P1_WIN,
      P2_LOSE,

      CHECK_P2_POS,
      BRANCH_CONTINUE_END_P2,
      P2_WIN,
      P1_LOSE,

      GAMEOVER

      };
    
  }

  
always {
  
    // standard setting unless otherwise overwritten by each case 
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    regfile_write_address_c = 1111;
    wdsel = 0;
    //ROM_asel_in = 0;
    mapRom.map_num = 0;
    mapRom.address = 0;
    playerPosRom.map_num = 0;
    loc_type = 0;
    fsm_to_led_write =0;
    debug = b0000;
    
    
    if (rst){
        game_fsm.d = game_fsm.CHECK_MAP_COUNT;
    }
    else{
      
    case(game_fsm.q){
    
      game_fsm.CHECK_MAP_COUNT:
        alufn = 100100; //CMPEQ
        asel = b00; 
        bsel = b01;
        we_regfile = 1;
        regfile_read_address_a = b0110;
        //regfile_read_address_b = --;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_MAP;          

      game_fsm.BRANCH_MAP:
        we_regfile = 0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){                      //if rb == 1
          game_fsm.d = game_fsm.LOAD_MAP_0;
        }
        else{
          game_fsm.d = game_fsm.ADD_1_TO_MAP;
        }

      game_fsm.LOAD_MAP_0: //
        //alufn = --;
        //asel = --; 
        //bsel = --;
        we_regfile = 1;
        //regfile_read_address_a = --;
        //regfile_read_address_b = --;
        regfile_write_address_c = b0110;
        wdsel = b11;
        game_fsm.d = game_fsm.MAP_UPDATE;        

      game_fsm.ADD_1_TO_MAP:
        alufn = b100000; //ADD
        asel = b01; 
        bsel = b00;
        we_regfile = 1;
        //regfile_read_address_a = --;
        regfile_read_address_b = b0110;
        regfile_write_address_c = b0110;
        wdsel = b00;
        game_fsm.d = game_fsm.MAP_UPDATE;   
          
      game_fsm.MAP_UPDATE: //initialise map and player position
        regfile_read_address_b = b0110;          
        mapRom.map_num = regfile_datain[1:0];
        playerPosRom.map_num = regfile_datain[1:0]; // 0, 1, 2 
        map = mapRom.out_encoding;
        game_fsm.d = game_fsm.INITP1_X_POS;    
               
      game_fsm.INITP1_X_POS:
        alufn = b101010; //A
        we_regfile = b1;
        regfile_write_address_c = b0000;
        asel =  b110;             //:  playerpos.outx;
        wdsel = b00;
        game_fsm.d = game_fsm.INITP1_Y_POS;
                    
          
          
      game_fsm.INITP1_Y_POS:
        alufn = b101010; //A
        we_regfile = b1;
        regfile_write_address_c = b0001;
        asel =  b111;             //:  playerpos.outy;
        wdsel = b00;
        game_fsm.d = game_fsm.INITP2_X_POS;
          
      game_fsm.INITP2_X_POS:
        alufn = b101010; //A
        we_regfile = b1;
        regfile_write_address_c = b0010;
        asel =  b110;             //:  playerpos.outy;
        wdsel = b00;
        game_fsm.d = game_fsm.INITP2_Y_POS;          
          
      game_fsm.INITP2_Y_POS:
        alufn = b101010; //A
        we_regfile = b1;
        regfile_write_address_c = b0011;
        asel =  b111;             //:  playerpos.outy;
        wdsel = b00;
        game_fsm.d = game_fsm.FLASH_MAP;          
                    
      game_fsm.FLASH_MAP: 
        alufn = b101010; //A
        asel = b001;     //1
        //bsel = ;
        we_regfile = 1 ;
        //regfile_read_address_a = --;
        regfile_read_address_b = b0111;
        regfile_write_address_c = b0111;
        wdsel = b00;
        fsm_to_led_write =1;
        game_fsm.d = game_fsm.TIMER_OUT;          
          
      game_fsm.TIMER_OUT:
        alufn =  b100001; //SUB
        asel = b001;     //1
        bsel = b00;
        we_regfile = 1 ;
        //regfile_read_address_a = --;
        regfile_read_address_b = b0111;
        regfile_write_address_c = b0111;
        wdsel = b00;
        fsm_to_led_write =0;
        game_fsm.d = game_fsm.IDLE;                  
         

      game_fsm.IDLE:
        if (p1_button_up){
            game_fsm.d = game_fsm.CHECK_P1_UP_BOUNDARY;
        }
        else if (p2_button_up){
            game_fsm.d = game_fsm.CHECK_P2_UP_BOUNDARY;
        }
         else if (p1_button_down){
            game_fsm.d = game_fsm.CHECK_P1_DOWN_BOUNDARY;
        }
        else if (p2_button_down){
            game_fsm.d = game_fsm.CHECK_P2_DOWN_BOUNDARY;
        }
        else if (p1_button_left){
            game_fsm.d = game_fsm.CHECK_P1_LEFT_BOUNDARY;
        }
        else if (p2_button_left){
            game_fsm.d = game_fsm.CHECK_P2_LEFT_BOUNDARY;
        }
        else if (p1_button_right){
            game_fsm.d = game_fsm.CHECK_P1_RIGHT_BOUNDARY;
        }
        else if (p2_button_right){
            game_fsm.d = game_fsm.CHECK_P2_RIGHT_BOUNDARY;
        }
        else{
            game_fsm.d = game_fsm.IDLE;
        }

        game_fsm.CHECK_P1_UP_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b10;
        we_regfile = b1;
        regfile_read_address_a = b0001;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P1_UP;
          

        game_fsm.BRANCH_P1_UP:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P1_UP;
        }

        game_fsm.SHIFT_P1_UP:
        alufn = b100001; //SUB
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0001;
        regfile_write_address_c = b0001;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P1_POS;


        game_fsm.CHECK_P2_UP_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b10;
        we_regfile = b1;
        regfile_read_address_a = b0011;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P1_UP;

        game_fsm.BRANCH_P2_UP:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P2_UP;
        }

        game_fsm.SHIFT_P2_UP:
        alufn = b100001; //SUB
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0011;
        regfile_write_address_c = b0011;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P2_POS;

        game_fsm.CHECK_P1_DOWN_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_read_address_a = b0001;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P1_DOWN;

        game_fsm.BRANCH_P1_DOWN:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P1_DOWN;
        }

        game_fsm.SHIFT_P1_DOWN:
        alufn = b100000; //ADD
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0001;
        regfile_write_address_c = b0001;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P1_POS;

        game_fsm.CHECK_P2_DOWN_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_read_address_a = b0011;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P2_DOWN;

        game_fsm.BRANCH_P2_DOWN:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P2_DOWN;
        }

        game_fsm.SHIFT_P2_DOWN:
        alufn = b100000; //ADD
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0011;
        regfile_write_address_c = b0011;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P2_POS;

        game_fsm.CHECK_P1_LEFT_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b10;
        we_regfile = b1;
        regfile_read_address_a = b0000;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P1_LEFT;

        game_fsm.BRANCH_P1_LEFT:
        we_regfile = b0;
        regfile_write_address_c = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P1_LEFT;
        }

        game_fsm.SHIFT_P1_LEFT:
        alufn = b100001; //SUB
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0;
        regfile_write_address_c = b0;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P1_POS;

        game_fsm.CHECK_P2_LEFT_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b10;
        we_regfile = b1;
        regfile_read_address_a = b0010;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P2_LEFT;

        game_fsm.BRANCH_P2_LEFT:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P2_LEFT;
        }

        game_fsm.SHIFT_P2_LEFT:
        alufn = b100001; //SUB
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0010;
        regfile_write_address_c = b0010;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P2_POS;

        game_fsm.CHECK_P1_RIGHT_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_read_address_a = b0000;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P1_RIGHT;

        game_fsm.BRANCH_P1_RIGHT:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P1_RIGHT;
        }

        game_fsm.SHIFT_P1_RIGHT:
        alufn = b100000; //ADD
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0000;
        regfile_write_address_c = b0000;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P1_POS;

        game_fsm.CHECK_P2_RIGHT_BOUNDARY:
        alufn = b100100; //CMPEQ
        asel = b00;
        bsel = b01;
        we_regfile = b1;
        regfile_read_address_a = b0010;
        regfile_write_address_c = b1111;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_P2_RIGHT;

        game_fsm.BRANCH_P2_RIGHT:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain[0]){
          game_fsm.d = game_fsm.IDLE;
        }
        else{
          game_fsm.d = game_fsm.SHIFT_P2_RIGHT;
        }

        game_fsm.SHIFT_P2_RIGHT:
        alufn = b100000; //ADD
        asel = b01; 
        bsel = b00;
        we_regfile = b1;
        regfile_read_address_b = b0010;
        regfile_write_address_c = b0010;
        wdsel = b00;
        game_fsm.d = game_fsm.CHECK_P2_POS;

        game_fsm.CHECK_P1_POS:
        alufn = b101010;  //A
        mapRom.address = c{p1_x_coord, p1_y_coord};
        asel =  b101;             //:  mapRom.out_encoding[p1_y_coord*4+p1_x_coord]; 
        we_regfile = b1;
        regfile_write_address_c = hF;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_CONTINUE_END_P1;

        game_fsm.BRANCH_CONTINUE_END_P1:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain == 0){
          game_fsm.d = game_fsm.IDLE;
        }
        else if (regfile_datain == 1){
          game_fsm.d = game_fsm.P2_WIN;
            }
        else{ //regfile_datain == 2
          game_fsm.d = game_fsm.P1_WIN;
        }
          
        game_fsm.CHECK_P2_POS:
        alufn = b101010; //A
        mapRom.address = c{p2_x_coord, p2_y_coord};
        asel =  b101;             //:  mapRom.out_encoding[p1_y_coord*4+p1_x_coord]; 
        we_regfile = b1;
        regfile_write_address_c = hF;
        wdsel = b00;
        game_fsm.d = game_fsm.BRANCH_CONTINUE_END_P2;

        game_fsm.BRANCH_CONTINUE_END_P2:
        we_regfile = b0;
        regfile_read_address_b = b1111;
        if (regfile_datain == 0){
          game_fsm.d = game_fsm.IDLE;
        }
        else if (regfile_datain == 1){
          game_fsm.d = game_fsm.P1_WIN;
            }
        else{ //regfile_datain == 2
          game_fsm.d = game_fsm.P2_WIN;
        }

      game_fsm.P2_WIN:
         we_regfile = 1;
         regfile_write_address_c = b0101;     //P2 score reg
         wdsel = b01;                         //P2 winning signal
         game_fsm.d = game_fsm.P1_LOSE; 
     
      game_fsm.P1_WIN:
         we_regfile = 1;
         regfile_write_address_c = b0100;     //P1 score reg
         wdsel = b01;           //P1 winning signal
         game_fsm.d = game_fsm.P2_LOSE; 
 
      game_fsm.P1_LOSE:
         we_regfile = 1;
         regfile_write_address_c = b0100;     //P1 score reg
         wdsel = b11;           //P1 losingsignal
         game_fsm.d = game_fsm.GAMEOVER; 
          
      game_fsm.P2_LOSE:
         we_regfile = 1;
         regfile_write_address_c = b0101;     //P2 score reg
         wdsel = b11;           //P2 losing signal
         game_fsm.d = game_fsm.GAMEOVER; 
      
          
      game_fsm.GAMEOVER:
        debug = b1111;
        fsm_to_led_write = 1; //flash all green for winner, all red for loser
        game_fsm.d = game_fsm.GAMEOVER;
        if (rst | start_button){
            game_fsm.d = game_fsm.CHECK_MAP_COUNT;
             

      }
    } 
  }
}